import { Crawler } from './crawler'
import { XMLParser } from 'fast-xml-parser'
import { test, vi, describe, beforeEach, expect } from 'vitest'
import puppeteer from 'puppeteer'

vi.mock('fs', () => {
  const xml =
    '<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet type="text/xsl" href="/sitemap_generator/default/sitemap.xsl"?><!--Generated by the Simple XML Sitemap Drupal module: https://drupal.org/project/simple_sitemap.--><urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9" xmlns:image="http://www.google.com/schemas/sitemap-image/1.1"><url><loc>http://portalconsultores.lndo.site/</loc><changefreq>daily</changefreq><priority>1.0</priority></url><url><loc>http://portalconsultores.lndo.site/brasilsegblog/inovacao-para-crescimento</loc><lastmod>2022-01-21T16:26:25-03:00</lastmod><priority>0.5</priority></url><url><loc>http://portalconsultores.lndo.site/uma-campanha-publicitaria-bem-construida-torna-se-um-agregador-na-estrategia</loc><lastmod>2022-04-27T17:00:15-03:00</lastmod><priority>0.5</priority></url></urlset>'

  return {
    readFileSync: vi.fn().mockReturnValue(xml),
    existsSync: vi.fn().mockReturnValue(true),
    mkdirSync: vi.fn(),
  }
})

describe('Crawler', () => {
  let crawler: Crawler
  let xmlParser: XMLParser
  beforeEach(() => {
    xmlParser = new XMLParser()
    crawler = new Crawler('sitemap.xml')
  })

  test('navigateAndTakePrint should work as expected', async () => {
    await crawler.navigateAndTakePrint()
    const spy = vi.spyOn(puppeteer, 'launch')
    expect(spy).toHaveBeenCalled()
  })
},{timeout:50000})
